{
	"info": {
		"_postman_id": "f519367c-a967-4d2a-a4a7-1e06e2cfef25",
		"name": "Test Explore With Me - Feature rating events",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32847805"
	},
	"item": [
		{
			"name": "Rating",
			"item": [
				{
					"name": "Добавления рейтинга",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Рейтинг должен содержать поля: id, rating, comment, eventId, userId, timestamp\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"    pm.expect(target).to.have.property('comment');\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('userId');\r",
									"    pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"const url = pm.request.url.toString();\r",
									"const eventId = url.match(/\\/events\\/(\\d+)/)[1];\r",
									"const userId = url.match(/\\/users\\/(\\d+)/)[1];\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.rating.toString()).equal(source.rating.toString(), 'Оценка должна соответствовать оценки в запросе');\r",
									"    pm.expect(target.comment).equal(source.comment, 'Комментарий должен соответствовать комментарию в запросе');\r",
									"    pm.expect(target.eventId.toString()).equal(eventId, 'Id события должно соответствовать переменной пути');\r",
									"    pm.expect(target.userId.toString()).equal(userId, 'Id пользователя должно соответствовать переменной пути');\r",
									"    pm.expect(target.timestamp).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга для незавершенного события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        rating = rnd.getRating();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга с comment = null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());        \r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"        rating['comment'] = null;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Рейтинг должен содержать поля: id, rating, comment, eventId, userId, timestamp\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('rating');\r",
									"    pm.expect(target).to.have.property('comment');\r",
									"    pm.expect(target).to.have.property('eventId');\r",
									"    pm.expect(target).to.have.property('userId');\r",
									"    pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"const url = pm.request.url.toString();\r",
									"const eventId = url.match(/\\/events\\/(\\d+)/)[1];\r",
									"const userId = url.match(/\\/users\\/(\\d+)/)[1];\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.rating.toString()).equal(source.rating.toString(), 'Оценка должна соответствовать оценки в запросе');\r",
									"    pm.expect(target.comment).equal(source.comment, 'Комментарий должен соответствовать комментарию в запросе');\r",
									"    pm.expect(target.eventId.toString()).equal(eventId, 'Id события должно соответствовать переменной пути');\r",
									"    pm.expect(target.userId.toString()).equal(userId, 'Id пользователя должно соответствовать переменной пути');\r",
									"    pm.expect(target.timestamp).to.not.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга с rating > 5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"        rating['rating'] = 100.0;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга с rating < 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"        rating['rating'] = -1;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга с rating = null",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());        \r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"        rating['rating'] = null;\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга с comment < 20",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"        rating['comment'] = rnd.getWord(10);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавления рейтинга с comment > 5000",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let rating;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        api.completedEvent(user.id, event.id);\r",
									"        rating = rnd.getRating();\r",
									"        rating['comment'] = rnd.getWord(5050);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"     pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(rating),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление рейтинга",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());        \r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.completedEvent(user.id, event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        const rating = await api.addRating(user1.id, event.id, rnd.getRating());\r",
									"        pm.collectionVariables.set(\"rid\", rating.id);\r",
									"        const foundedRating = await api.findRating(rating.id);\r",
									"        pm.collectionVariables.set('response', foundedRating);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const ratingId = pm.collectionVariables.get('rid');\r",
									"\r",
									"pm.test(\"Рейтинг должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source.id).to.eql(ratingId);\r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/ratings/\" + ratingId,\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Рейтинг должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.code).to.eql(404);\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/ratings/:ratingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"ratings",
								":ratingId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "ratingId",
									"value": "{{rid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение рейтинга по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());        \r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        await api.completedEvent(user.id, event.id);\r",
									"        const rating = await api.addRating(user1.id, event.id, rnd.getRating());\r",
									"        pm.collectionVariables.set(\"rid\", rating.id);\r",
									"        pm.collectionVariables.set('response', rating);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Рейтинг должен содержать поля: id, rating, comment, eventId, userId, timestamp.\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('rating');\r",
									"pm.expect(target).to.have.property('comment');\r",
									"pm.expect(target).to.have.property('eventId');\r",
									"pm.expect(target).to.have.property('userId');\r",
									"pm.expect(target).to.have.property('timestamp');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор рейтинга должен соответствовать идентификатору в запросе');\r",
									"    pm.expect(source.rating).equal(target.rating, 'Оценка должна соответствовать оценке в запросе');\r",
									"    pm.expect(source.comment).equal(target.comment, 'Комментарий должен соответствовать комментарию в запросе');\r",
									"    pm.expect(source.eventId).equal(target.eventId, 'Идентификатор события должен соответствовать идентификатору события в запросе');\r",
									"    pm.expect(source.userId).equal(target.userId, 'Идентификатор пользователя должен соответствовать идентификатору пользователя в запросе');\r",
									"    pm.expect(source.timestamp).equal(target.timestamp, 'Время создания рейтинга должно соответствовать времени в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/:ratingId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								":ratingId"
							],
							"variable": [
								{
									"key": "ratingId",
									"value": "{{rid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение по пользователю",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());        \r",
									"        pm.collectionVariables.set(\"uid\", user1.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        const event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        const event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        await api.completedEvent(user.id, event.id);\r",
									"        await api.completedEvent(user.id, event1.id);\r",
									"        await api.completedEvent(user.id, event2.id);\r",
									"        const rating = await api.addRating(user1.id, event.id, rnd.getRating());\r",
									"        const rating1 = await api.addRating(user1.id, event1.id, rnd.getRating());\r",
									"        const rating2 = await api.addRating(user1.id, event2.id, rnd.getRating());\r",
									"        const ratings = [rating2, rating1, rating];\r",
									"        const sortedRatings = ratings.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r",
									"        pm.collectionVariables.set('response', sortedRatings);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные списка в ответе должны соответствовать ожидаемым данным\", function () {\r",
									"    pm.expect(target.length).equal(source.length, 'Количество рейтингов в коллекции должно совпадать с добавленным количеством.');\r",
									"    pm.expect(target[0].id).equal(source[0].id, 'Идентификатор рейтинга должен соответствовать идентификатору первого элемента списка.');\r",
									"    pm.expect(target[1].id).equal(source[1].id, 'Идентификатор рейтинга должен соответствовать идентификатору второго элемента списка.');\r",
									"    pm.expect(target[2].id).equal(source[2].id, 'Идентификатор рейтинга должен соответствовать идентификатору третьего элемента списка.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/ratings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"ratings"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение рейтинга по событию с сортировкой по умолчанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const users = await Promise.all([\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser())\r",
									"        ]);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(users[0].id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        await api.completedEvent(users[0].id, event.id);\r",
									"        \r",
									"        const ratings = [];\r",
									"\r",
									"        for (let i = 1; i < users.length; i++) {\r",
									"        const user = users[i];\r",
									"        let rating;\r",
									"        if (i === 2 || i === 4 || i === 5 || i === 9) {\r",
									"            rating = await rnd.getRating();\r",
									"            rating['comment'] = null;\r",
									"        } else {\r",
									"            rating = await rnd.getRating();\r",
									"        }\r",
									"\r",
									"        const responseRating = await api.addRating(user.id, event.id, rating)\r",
									"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
									"        ratings.push(responseRating);\r",
									"    }\r",
									"\r",
									"    const addedRatings = await Promise.all(ratings);\r",
									"    const sortedRatings = addedRatings.sort((a, b) => {\r",
									"        if (a.comment !== null && b.comment === null) return -1;\r",
									"        if (a.comment === null && b.comment !== null) return 1;\r",
									"        return (b.timestamp && a.timestamp) ? b.timestamp.localeCompare(a.timestamp) : 0;\r",
									"    });\r",
									"    console.log(sortedRatings);\r",
									"\r",
									"    pm.collectionVariables.set('response', sortedRatings);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные списка в ответе должны соответствовать ожидаемым данным\", function () {\r",
									"    pm.expect(target.length).equal(source.length, 'Количество рейтингов в коллекции должно совпадать с добавленным количеством.');\r",
									"    pm.expect(target[0].id).equal(source[0].id, 'Идентификатор рейтинга должен соответствовать идентификатору первого элемента списка.');\r",
									"    pm.expect(target[1].id).equal(source[1].id, 'Идентификатор рейтинга должен соответствовать идентификатору второго элемента списка.');\r",
									"    pm.expect(target[2].id).equal(source[2].id, 'Идентификатор рейтинга должен соответствовать идентификатору третьего элемента списка.');\r",
									"    pm.expect(target[3].id).equal(source[3].id, 'Идентификатор рейтинга должен соответствовать идентификатору четвертого элемента списка.');\r",
									"    pm.expect(target[4].id).equal(source[4].id, 'Идентификатор рейтинга должен соответствовать идентификатору пятого элемента списка.');\r",
									"    pm.expect(target[5].id).equal(source[5].id, 'Идентификатор рейтинга должен соответствовать идентификатору шестого элемента списка.');\r",
									"    pm.expect(target[6].id).equal(source[6].id, 'Идентификатор рейтинга должен соответствовать идентификатору седьмого элемента списка.');\r",
									"    pm.expect(target[7].id).equal(source[7].id, 'Идентификатор рейтинга должен соответствовать идентификатору восьмого элемента списка.');\r",
									"    pm.expect(target[8].id).equal(source[8].id, 'Идентификатор рейтинга должен соответствовать идентификатору девятого элемента списка.');\r",
									"    pm.expect(target[9].id).equal(source[9].id, 'Идентификатор рейтинга должен соответствовать идентификатору десятого элемента списка.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение рейтинга по событию с сортировкой HIGH_RATING",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const users = await Promise.all([\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser())\r",
									"        ]);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(users[0].id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        await api.completedEvent(users[0].id, event.id);\r",
									"        \r",
									"        const ratings = [];\r",
									"\r",
									"        for (let i = 1; i < users.length; i++) {\r",
									"        const user = users[i];\r",
									"        let rating;\r",
									"        if (i === 2 || i === 4 || i === 5 || i === 9) {\r",
									"            rating = await rnd.getRating();\r",
									"            rating['comment'] = null;\r",
									"        } else {\r",
									"            rating = await rnd.getRating();\r",
									"        }\r",
									"\r",
									"        const responseRating = await api.addRating(user.id, event.id, rating)\r",
									"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
									"        ratings.push(responseRating);\r",
									"    }\r",
									"\r",
									"    const addedRatings = await Promise.all(ratings);\r",
									"    const sortedRatings = addedRatings.sort((a, b) => {\r",
									"        if (a.comment !== null && b.comment === null) return -1;\r",
									"        if (a.comment === null && b.comment !== null) return 1;\r",
									"        return b.rating - a.rating;\r",
									"    });\r",
									"\r",
									"    console.log(sortedRatings);\r",
									"\r",
									"    pm.collectionVariables.set('response', sortedRatings);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные списка в ответе должны соответствовать ожидаемым данным\", function () {\r",
									"    pm.expect(target.length).equal(source.length, 'Количество рейтингов в коллекции должно совпадать с добавленным количеством.');\r",
									"    pm.expect(target[0].id).equal(source[0].id, 'Идентификатор рейтинга должен соответствовать идентификатору первого элемента списка.');\r",
									"    pm.expect(target[1].id).equal(source[1].id, 'Идентификатор рейтинга должен соответствовать идентификатору второго элемента списка.');\r",
									"    pm.expect(target[2].id).equal(source[2].id, 'Идентификатор рейтинга должен соответствовать идентификатору третьего элемента списка.');\r",
									"    pm.expect(target[3].id).equal(source[3].id, 'Идентификатор рейтинга должен соответствовать идентификатору четвертого элемента списка.');\r",
									"    pm.expect(target[4].id).equal(source[4].id, 'Идентификатор рейтинга должен соответствовать идентификатору пятого элемента списка.');\r",
									"    pm.expect(target[5].id).equal(source[5].id, 'Идентификатор рейтинга должен соответствовать идентификатору шестого элемента списка.');\r",
									"    pm.expect(target[6].id).equal(source[6].id, 'Идентификатор рейтинга должен соответствовать идентификатору седьмого элемента списка.');\r",
									"    pm.expect(target[7].id).equal(source[7].id, 'Идентификатор рейтинга должен соответствовать идентификатору восьмого элемента списка.');\r",
									"    pm.expect(target[8].id).equal(source[8].id, 'Идентификатор рейтинга должен соответствовать идентификатору девятого элемента списка.');\r",
									"    pm.expect(target[9].id).equal(source[9].id, 'Идентификатор рейтинга должен соответствовать идентификатору десятого элемента списка.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/events/:eventId?sortType=HIGH_RATING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"events",
								":eventId"
							],
							"query": [
								{
									"key": "sortType",
									"value": "HIGH_RATING"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение рейтинга по событию с сортировкой LOW_RATING",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const users = await Promise.all([\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser()),\r",
									"            api.addUser(rnd.getUser())\r",
									"        ]);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(users[0].id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        await api.completedEvent(users[0].id, event.id);\r",
									"        \r",
									"        const ratings = [];\r",
									"\r",
									"        for (let i = 1; i < users.length; i++) {\r",
									"        const user = users[i];\r",
									"        let rating;\r",
									"        if (i === 2 || i === 4 || i === 5 || i === 9) {\r",
									"            rating = await rnd.getRating();\r",
									"            rating['comment'] = null;\r",
									"        } else {\r",
									"            rating = await rnd.getRating();\r",
									"        }\r",
									"\r",
									"        const responseRating = await api.addRating(user.id, event.id, rating)\r",
									"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
									"        ratings.push(responseRating);\r",
									"    }\r",
									"\r",
									"    const addedRatings = await Promise.all(ratings);\r",
									"    const sortedRatings = addedRatings.sort((a, b) => {\r",
									"        if (a.comment !== null && b.comment === null) return -1;\r",
									"        if (a.comment === null && b.comment !== null) return 1;\r",
									"        return a.rating - b.rating;\r",
									"    });\r",
									"\r",
									"    console.log(sortedRatings);\r",
									"\r",
									"    pm.collectionVariables.set('response', sortedRatings);\r",
									"\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Данные списка в ответе должны соответствовать ожидаемым данным\", function () {\r",
									"    pm.expect(target.length).equal(source.length, 'Количество рейтингов в коллекции должно совпадать с добавленным количеством.');\r",
									"    pm.expect(target[0].id).equal(source[0].id, 'Идентификатор рейтинга должен соответствовать идентификатору первого элемента списка.');\r",
									"    pm.expect(target[1].id).equal(source[1].id, 'Идентификатор рейтинга должен соответствовать идентификатору второго элемента списка.');\r",
									"    pm.expect(target[2].id).equal(source[2].id, 'Идентификатор рейтинга должен соответствовать идентификатору третьего элемента списка.');\r",
									"    pm.expect(target[3].id).equal(source[3].id, 'Идентификатор рейтинга должен соответствовать идентификатору четвертого элемента списка.');\r",
									"    pm.expect(target[4].id).equal(source[4].id, 'Идентификатор рейтинга должен соответствовать идентификатору пятого элемента списка.');\r",
									"    pm.expect(target[5].id).equal(source[5].id, 'Идентификатор рейтинга должен соответствовать идентификатору шестого элемента списка.');\r",
									"    pm.expect(target[6].id).equal(source[6].id, 'Идентификатор рейтинга должен соответствовать идентификатору седьмого элемента списка.');\r",
									"    pm.expect(target[7].id).equal(source[7].id, 'Идентификатор рейтинга должен соответствовать идентификатору восьмого элемента списка.');\r",
									"    pm.expect(target[8].id).equal(source[8].id, 'Идентификатор рейтинга должен соответствовать идентификатору девятого элемента списка.');\r",
									"    pm.expect(target[9].id).equal(source[9].id, 'Идентификатор рейтинга должен соответствовать идентификатору десятого элемента списка.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ratings/events/:eventId?sortType=LOW_RATING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ratings",
								"events",
								":eventId"
							],
							"query": [
								{
									"key": "sortType",
									"value": "LOW_RATING"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий с возможностью фильтрации по рейтингу",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.completedEvent(user.id, event.id);\r",
									"        await api.addRating(user1.id, event.id, rnd.getRating());\r",
									"        event = await api.findEvent(event.id);\r",
									"        pm.request.removeQueryParams(['text', 'categories', 'paid']);\r",
									"        pm.request.addQueryParams([`text=` + event.annotation, 'categories=' + category.id, 'paid=' + event.paid]);\r",
									"        \r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"\r",
									"        const events = []\r",
									"        console.log(event);\r",
									"        pm.collectionVariables.set('response', event);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, rating\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('views');\r",
									"pm.expect(target).to.have.property('confirmedRequests');\r",
									"pm.expect(target).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
									"    pm.expect(source.category.id).equal(target.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
									"    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
									"    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
									"    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
									"    pm.expect(source.rating).equal(target.rating, 'Рейтинг события должен соответствовать рейтингу события после создания рейтинга');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events?sort=RATING",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "sort",
									"value": "RATING",
									"description": "Сортировка по рейтингу"
								}
							]
						},
						"description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
					},
					"response": []
				},
				{
					"name": "Поиск пользователей c рейтингом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        let user = await api.addUser(rnd.getUser());\r",
									"        const user1 = await api.addUser(rnd.getUser());        \r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        await api.completedEvent(user.id, event.id);\r",
									"        const rating = await api.addRating(user1.id, event.id, rnd.getRating());\r",
									"        const updatedUser = await api.findUser(user.id);\r",
									"        console.log(updatedUser);\r",
									"        pm.collectionVariables.set('response', updatedUser);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователи должны содержать поля: id, name, email, rating\", function () {\r",
									"    pm.expect(target[0]).to.have.property('id');\r",
									"    pm.expect(target[0]).to.have.property('name');\r",
									"    pm.expect(target[0]).to.have.property('email');\r",
									"    pm.expect(target[0]).to.have.property('rating');\r",
									"});\r",
									"\r",
									"pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
									"    pm.expect(target.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target[0].id).equal(pm.collectionVariables.get(\"uid\"));\r",
									"    pm.expect(target[0].rating).not.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/users?ids={{uid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{uid}}",
									"description": "id пользователей"
								},
								{
									"key": "ids",
									"value": "-10833646",
									"description": "id пользователей",
									"disabled": true
								},
								{
									"key": "from",
									"value": "0",
									"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
									"disabled": true
								},
								{
									"key": "size",
									"value": "10",
									"description": "количество элементов в наборе",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addRating(userId, eventId, rating, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/ratings\", rating, \"Ошибка при добавлении рейтинга: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async completedEvent(userId, eventId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId, {stateAction: \"COMPLETED_EVENT\"}, \"Ошибка при завершении события\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async findRating(ratingId, verbose=null) {",
					"        return this.get(\"/ratings/\" + ratingId, null, \"Ошибка при поиске рейтинга по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getRating() {",
					"        let rating = Math.random() * 4 + 1;",
					"        let decimalPart = Math.floor(Math.random() * 9) + 1;",
					"",
					"        if (rating + decimalPart / 10 > 4.9) {",
					"            rating = 4.9 - Math.random() * 0.9;",
					"        }",
					"",
					"        return {",
					"            rating: rating.toFixed(1).replace(/\\.0$/, '.' + decimalPart),",
					"            comment: pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        };",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "rid",
			"value": "1",
			"type": "string"
		}
	]
}